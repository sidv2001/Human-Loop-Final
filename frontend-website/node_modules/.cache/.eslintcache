[{"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/index.js":"1","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/App.js":"2","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/reportWebVitals.js":"3","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/StudyPage.js":"4","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/MainQuestions.js":"5","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/DistractionTask.js":"6","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/openEndedQ.js":"7","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/BBox.js":"8","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/MCQ.js":"9","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/RanNum.js":"10","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/VideoCap.js":"11","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/Essay.js":"12","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/Survey.js":"13"},{"size":500,"mtime":1659997416365,"results":"14","hashOfConfig":"15"},{"size":2447,"mtime":1663334116874,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1658266437603,"results":"17","hashOfConfig":"15"},{"size":9479,"mtime":1663333945063,"results":"18","hashOfConfig":"15"},{"size":4097,"mtime":1663006959266,"results":"19","hashOfConfig":"15"},{"size":1773,"mtime":1663005814610,"results":"20","hashOfConfig":"15"},{"size":3118,"mtime":1662999448018,"results":"21","hashOfConfig":"15"},{"size":2408,"mtime":1660882527057,"results":"22","hashOfConfig":"15"},{"size":3824,"mtime":1660882496983,"results":"23","hashOfConfig":"15"},{"size":3644,"mtime":1663199269376,"results":"24","hashOfConfig":"15"},{"size":1102,"mtime":1662998664767,"results":"25","hashOfConfig":"15"},{"size":830,"mtime":1660172905747,"results":"26","hashOfConfig":"15"},{"size":7297,"mtime":1660881129919,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1azflvp",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"31"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"31"},"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/index.js",[],[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/App.js",["71","72","73"],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/reportWebVitals.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/StudyPage.js",["74"],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/MainQuestions.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/DistractionTask.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/openEndedQ.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/BBox.js",["75"],[],"import React, { Component } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport BBoxAnnotator from \"react-bbox-annotator\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass BBox extends Component {\n  state = {\n    form: {\n      question: this.props.config[\"question\"],\n      answer: null,\n      time_taken: 0,\n      question_difficulty: this.props.config[\"question_difficulty\"],\n      interval: this.props.interval,\n      user_busyness: this.props.user_busyness,\n    },\n    q_timer_id: null,\n  };\n\n  setTimerId = (id) => {\n    const adapt_state = this.state;\n    adapt_state.q_timer_id = id;\n    this.setState({ adapt_state });\n  };\n\n  setTimer = (time) => {\n    const adapt_state = this.state;\n    adapt_state.form.time_taken = time;\n\n    this.setState({ adapt_state });\n  };\n\n  setAnswer = (ans) => {\n    const adapt_state = this.state;\n    adapt_state.form.answer = ans;\n\n    this.setState({ adapt_state });\n  };\n\n  updateCurrentTime = () => {\n    if (this.state.form.time_taken === 60000) {\n      clearInterval(this.state.q_timer_id);\n      var copy = {};\n      Object.assign(copy, this.state.form);\n      this.props.update_results(copy);\n      this.props.set_display(false);\n    } else {\n      const adapt_state = this.state;\n      adapt_state.form.time_taken += 100;\n      this.setState({ adapt_state });\n    }\n  };\n\n  startTimer = () => {\n    const id = setInterval(() => {\n      this.updateCurrentTime();\n    }, 100);\n    this.setTimerId(id);\n  };\n\n  componentDidMount = () => {\n    this.startTimer();\n  };\n\n  update_answers = (event) => {\n    console.log(\"answers_updating\");\n    this.setAnswer(event);\n    console.log(this.state.form.answer);\n  };\n\n  submitHandler = () => {\n    clearInterval(this.state.q_timer_id);\n    var copy = {};\n    Object.assign(copy, this.state.form);\n    this.props.update_results(copy);\n    this.props.update_display(false);\n  };\n\n  render() {\n    return (\n      <div>\n        <div>{this.props.config[\"question\"]}</div>\n        <BBoxAnnotator\n          url={`../images/${this.props.config[\"context-source\"]}.jpg`}\n          inputMethod=\"select\"\n          labels={this.props.config[\"labels\"]}\n          onChange={(e) => this.update_answers(e)}\n        />\n        <Button variant=\"primary\" type=\"submit\" onClick={this.submitHandler}>\n          Submit\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default BBox;\n","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/MCQ.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/RanNum.js",["76","77","78","79","80","81","82"],[],"import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass RanNum extends Component {\n  state = {\n    questions_asked: [],\n    question_answers: [],\n    current_question: [\n      RanNum.getRandomInt(this.props.max),\n      RanNum.getRandomInt(this.props.max),\n      \" + \",\n    ],\n    current_question_number: 0,\n    is_displayed: true,\n    when_to_display: 30000,\n  };\n\n  static getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  update_answers = (event) => {\n    const adapt_state = this.state;\n    adapt_state.question_answers[this.state.current_question_number] =\n      event.target.value;\n    this.setState({ adapt_state });\n  };\n\n  submitHandler = () => {\n    const adapt_state = this.state;\n    adapt_state.questions_asked.push(this.state.current_question);\n    adapt_state.current_question_number += 1;\n    adapt_state.current_question = [\n      RanNum.getRandomInt(this.props.max),\n      RanNum.getRandomInt(this.props.max),\n      \" + \",\n    ];\n    adapt_state.is_displayed = false;\n    this.props.update_results({\n      questions_asked: adapt_state.questions_asked,\n      question_answers: adapt_state.question_answers,\n    });\n    this.setState({ adapt_state });\n  };\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    const adapt_state = prevState;\n    if (!prevState.is_displayed) {\n      if (prevState.when_to_display === nextProps.time) {\n        adapt_state.is_displayed = true;\n        adapt_state.last_call = prevState.when_to_display + nextProps.interval;\n        return adapt_state;\n      }\n    } else {\n      if (prevState.when_to_display - 1000 === nextProps.time) {\n        adapt_state.questions_asked.push(adapt_state.current_question);\n        adapt_state.current_question_number += 1;\n        adapt_state.current_question = [\n          RanNum.getRandomInt(this.props.max),\n          RanNum.getRandomInt(this.props.max),\n          \" + \",\n        ];\n        adapt_state.is_displayed = false;\n        this.props.update_results({\n          questions_asked: adapt_state.questions_asked,\n          question_answers: adapt_state.question_answers,\n        });\n        return adapt_state;\n      }\n    }\n    return null;\n  };\n  render() {\n    if (this.state.is_displayed) {\n      return (\n        <div>\n          {\" \"}\n          <Form>\n            <Form.Group className=\"mb-3\" controlId={\"Form.Question\"}>\n              <Form.Label>\n                <div>\n                  {\" \"}\n                  Please solve the following math problem: <br />\n                  <h4>\n                    {\" \"}\n                    {this.state.current_question[0]}{\" \"}\n                    {this.state.current_question[2]}{\" \"}\n                    {this.state.current_question[1]}\n                  </h4>\n                </div>\n              </Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={1}\n                onChange={this.update_answers}\n                disabled={this.props.disabled}\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              onClick={this.submitHandler}\n            >\n              Submit\n            </Button>\n          </Form>\n        </div>\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n}\n\nexport default RanNum;\n","/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/VideoCap.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/Essay.js",[],[],"/Users/sidvas/Desktop/Human-Loop-Mturk/frontend-website/src/Survey.js",["83"],[],"import React, { Component } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport { Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass Survey extends Component {\n  state = {\n    results: {\n      mental: null,\n      temporal: null,\n      performance: null,\n      effort: null,\n      frustration: null,\n    },\n    mental: 0,\n    temporal: 0,\n    performance: 0,\n    effort: 0,\n    frustration: 0,\n    display_alert: false,\n    display_modal: this.props.enabled,\n  };\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    const adapt_state = prevState;\n    if (nextProps.enabled === adapt_state.display_modal) {\n      return null;\n    } else {\n      adapt_state.display_modal = nextProps.enabled;\n\n      return adapt_state;\n    }\n  };\n\n  setAlert = (truth) => {\n    const adapt_state = this.state;\n    adapt_state.display_alert = truth;\n    this.setState({ adapt_state });\n  };\n\n  handleSubmit = () => {\n    const notNull = (value) => value != null;\n    if (Object.values(this.state.results).every(notNull)) {\n      this.props.update_results(this.state.results, this.props.current_survey);\n      const reset_res = {\n        results: {\n          mental: null,\n          temporal: null,\n          performance: null,\n          effort: null,\n          frustration: null,\n        },\n        mental: 0,\n        temporal: 0,\n        performance: 0,\n        effort: 0,\n        frustration: 0,\n      };\n      this.setState(reset_res);\n    } else {\n      this.setAlert(true);\n    }\n  };\n\n  setMental = (value) => {\n    const adapt_state = this.state;\n    adapt_state.mental = value;\n    adapt_state.results.mental = value;\n    this.setState({ adapt_state });\n  };\n\n  setTemporal = (value) => {\n    const adapt_state = this.state;\n    adapt_state.temporal = value;\n    adapt_state.results.temporal = value;\n    this.setState({ adapt_state });\n  };\n\n  setPerformance = (value) => {\n    const adapt_state = this.state;\n    adapt_state.performance = value;\n    adapt_state.results.performance = value;\n    this.setState({ adapt_state });\n  };\n\n  setEffort = (value) => {\n    const adapt_state = this.state;\n    adapt_state.effort = value;\n    adapt_state.results.effort = value;\n    this.setState({ adapt_state });\n  };\n\n  setFrustration = (value) => {\n    const adapt_state = this.state;\n    adapt_state.frustration = value;\n    adapt_state.results.frustration = value;\n    this.setState({ adapt_state });\n  };\n\n  displayAlert = () => {\n    if (this.state.display_alert) {\n      return (\n        <Alert\n          variant=\"danger\"\n          onClose={() => this.setAlert(false)}\n          dismissible\n        >\n          <Alert.Heading>\n            Please answer all the questions before trying to submit{\" \"}\n          </Alert.Heading>\n          <p>\n            You have failed to answer one of the parts of the survey. Please\n            answer it before moving on.\n          </p>\n        </Alert>\n      );\n    } else {\n      return <div></div>;\n    }\n  };\n\n  displayModal = () => {\n    return (\n      <div>\n        <Modal\n          show={this.state.display_modal}\n          backdrop=\"static\"\n          keyboard={false}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Header>\n            <Modal.Title>Cognitive Workload Survey</Modal.Title>\n            {this.displayAlert()}\n          </Modal.Header>\n          <Modal.Body>\n            <div>\n              Please tell us from a scale of 0 (very low) to 100 (very high),\n              how demanding your workload felt for the tasks you did:\n            </div>\n            <br />\n            <div>\n              <Form>\n                <Form.Group as={Row}>\n                  <Form.Label>\n                    <b>Mental Demand</b>: {\"\\n\"} How mentally demanding was the\n                    task?\n                  </Form.Label>\n                  <Col xs=\"9\">\n                    <Form.Range\n                      value={this.state.mental}\n                      onChange={(e) => this.setMental(e.target.value)}\n                    />\n                  </Col>\n                  <Col xs=\"3\">\n                    <Form.Control value={this.state.mental} />\n                  </Col>\n                </Form.Group>\n                <Form.Group as={Row}>\n                  <Form.Label>\n                    <b>Temporal Demand </b>: {\"\\n\"} How hurried or rushed was\n                    the pace of the task?\n                  </Form.Label>\n                  <Col xs=\"9\">\n                    <Form.Range\n                      value={this.state.temporal}\n                      onChange={(e) => this.setTemporal(e.target.value)}\n                    />\n                  </Col>\n                  <Col xs=\"3\">\n                    <Form.Control value={this.state.temporal} />\n                  </Col>\n                </Form.Group>\n                <Form.Group as={Row}>\n                  <Form.Label>\n                    <b>Performance</b>: {\"\\n\"} How successful were you in\n                    accomplishing what you were asked to do?\n                  </Form.Label>\n                  <Col xs=\"9\">\n                    <Form.Range\n                      value={this.state.performance}\n                      onChange={(e) => this.setPerformance(e.target.value)}\n                    />\n                  </Col>\n                  <Col xs=\"3\">\n                    <Form.Control value={this.state.performance} />\n                  </Col>\n                </Form.Group>\n                <Form.Group as={Row}>\n                  <Form.Label>\n                    <b>Effort</b>: {\"\\n\"} How hard did you have to work to\n                    accomplish your level of performance?\n                  </Form.Label>\n                  <Col xs=\"9\">\n                    <Form.Range\n                      value={this.state.effort}\n                      onChange={(e) => this.setEffort(e.target.value)}\n                    />\n                  </Col>\n                  <Col xs=\"3\">\n                    <Form.Control value={this.state.effort} />\n                  </Col>\n                </Form.Group>\n                <Form.Group as={Row}>\n                  <Form.Label>\n                    <b>Frustration</b>: {\"\\n\"} How irritated, stressed, and\n                    annoyed were you?\n                  </Form.Label>\n                  <Col xs=\"9\">\n                    <Form.Range\n                      value={this.state.frustration}\n                      onChange={(e) => this.setFrustration(e.target.value)}\n                    />\n                  </Col>\n                  <Col xs=\"3\">\n                    <Form.Control value={this.state.frustration} />\n                  </Col>\n                </Form.Group>\n              </Form>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.handleSubmit}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  };\n\n  render() {\n    return this.displayModal();\n  }\n}\n\nexport default Survey;\n",{"ruleId":"84","severity":1,"message":"85","line":6,"column":3,"nodeType":"86","messageId":"87","endLine":6,"endColumn":7},{"ruleId":"84","severity":1,"message":"88","line":7,"column":3,"nodeType":"86","messageId":"87","endLine":7,"endColumn":11},{"ruleId":"89","severity":2,"message":"90","line":73,"column":55,"nodeType":"91","messageId":"92","endLine":73,"endColumn":67},{"ruleId":"84","severity":1,"message":"93","line":6,"column":18,"nodeType":"86","messageId":"87","endLine":6,"endColumn":27},{"ruleId":"84","severity":1,"message":"94","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":14},{"ruleId":"84","severity":1,"message":"95","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":13},{"ruleId":"84","severity":1,"message":"96","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":17},{"ruleId":"84","severity":1,"message":"97","line":7,"column":8,"nodeType":"86","messageId":"87","endLine":7,"endColumn":11},{"ruleId":"84","severity":1,"message":"98","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":11},{"ruleId":"84","severity":1,"message":"99","line":9,"column":8,"nodeType":"86","messageId":"87","endLine":9,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":16,"column":7,"nodeType":"86","messageId":"102","endLine":16,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":17,"column":7,"nodeType":"86","messageId":"102","endLine":17,"endColumn":13},{"ruleId":"84","severity":1,"message":"96","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":17},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'NotFound' is defined but never used.","react/jsx-no-undef","'Instructions' is not defined.","JSXIdentifier","undefined","'ModalBody' is defined but never used.","'Form' is defined but never used.","'Modal' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Alert' is defined but never used.","no-use-before-define","'RanNum' was used before it was defined.","usedBeforeDefined"]