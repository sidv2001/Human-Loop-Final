var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import React, { useRef, useEffect, useState, useImperativeHandle } from 'react';
import { createUseStyles } from 'react-jss';
import { v4 as uuid } from 'uuid';
import BBoxSelector from '../BBoxSelector';
import LabelBox from '../LabelBox';
var useStyles = createUseStyles({
    bBoxAnnotator: {
        cursor: 'crosshair',
    },
    imageFrame: {
        position: 'relative',
        backgroundSize: '100%',
    },
});
var BBoxAnnotator = React.forwardRef(function (_a, ref) {
    var url = _a.url, _b = _a.borderWidth, borderWidth = _b === void 0 ? 2 : _b, inputMethod = _a.inputMethod, labels = _a.labels, onChange = _a.onChange;
    var classes = useStyles();
    var _c = useState(null), pointer = _c[0], setPointer = _c[1];
    var _d = useState(null), offset = _d[0], setOffset = _d[1];
    var _e = useState([]), entries = _e[0], setEntries = _e[1];
    var _f = useState(1), multiplier = _f[0], setMultiplier = _f[1];
    useEffect(function () {
        onChange(entries.map(function (entry) { return ({
            width: Math.round(entry.width * multiplier),
            height: Math.round(entry.height * multiplier),
            top: Math.round(entry.top * multiplier),
            left: Math.round(entry.left * multiplier),
            label: entry.label,
        }); }));
    }, [entries, multiplier]);
    var _g = useState('free'), status = _g[0], setStatus = _g[1];
    var _h = useState({}), bBoxAnnotatorStyle = _h[0], setBboxAnnotatorStyle = _h[1];
    var _j = useState({}), imageFrameStyle = _j[0], setImageFrameStyle = _j[1];
    var bBoxAnnotatorRef = useRef(null);
    var labelInputRef = useRef(null);
    useEffect(function () {
        var _a;
        var maxWidth = ((_a = bBoxAnnotatorRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth) || 1;
        var imageElement = new Image();
        imageElement.src = url;
        imageElement.onload = function () {
            var width = imageElement.width;
            var height = imageElement.height;
            setMultiplier(width / maxWidth);
            setBboxAnnotatorStyle({
                width: width / multiplier,
                height: height / multiplier,
            });
            setImageFrameStyle({
                backgroundImageSrc: imageElement.src,
                width: width / multiplier,
                height: height / multiplier,
            });
        };
        imageElement.onerror = function () {
            throw 'Invalid image URL: ' + url;
        };
    }, [url, multiplier, bBoxAnnotatorRef]);
    var crop = function (pageX, pageY) {
        return {
            x: bBoxAnnotatorRef.current && imageFrameStyle.width
                ? Math.min(Math.max(Math.round(pageX - bBoxAnnotatorRef.current.offsetLeft), 0), Math.round(imageFrameStyle.width - 1))
                : 0,
            y: bBoxAnnotatorRef.current && imageFrameStyle.height
                ? Math.min(Math.max(Math.round(pageY - bBoxAnnotatorRef.current.offsetTop), 0), Math.round(imageFrameStyle.height - 1))
                : 0,
        };
    };
    var updateRectangle = function (pageX, pageY) {
        setPointer(crop(pageX, pageY));
    };
    useEffect(function () {
        var mouseMoveHandler = function (e) {
            switch (status) {
                case 'hold':
                    updateRectangle(e.pageX, e.pageY);
            }
        };
        window.addEventListener('mousemove', mouseMoveHandler);
        return function () { return window.removeEventListener('mousemove', mouseMoveHandler); };
    }, [status]);
    useEffect(function () {
        var mouseUpHandler = function (e) {
            var _a;
            switch (status) {
                case 'hold':
                    updateRectangle(e.pageX, e.pageY);
                    setStatus('input');
                    (_a = labelInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            }
        };
        window.addEventListener('mouseup', mouseUpHandler);
        return function () { return window.removeEventListener('mouseup', mouseUpHandler); };
    }, [status, labelInputRef]);
    var addEntry = function (label) {
        setEntries(__spreadArrays(entries, [__assign(__assign({}, rect), { label: label, id: uuid(), showCloseButton: false })]));
        setStatus('free');
        setPointer(null);
        setOffset(null);
    };
    var mouseDownHandler = function (e) {
        switch (status) {
            case 'free':
            case 'input':
                if (e.button !== 2) {
                    setOffset(crop(e.pageX, e.pageY));
                    setPointer(crop(e.pageX, e.pageY));
                    setStatus('hold');
                }
        }
    };
    var rectangle = function () {
        var x1 = offset && pointer ? Math.min(offset.x, pointer.x) : 0;
        var x2 = offset && pointer ? Math.max(offset.x, pointer.x) : 0;
        var y1 = offset && pointer ? Math.min(offset.y, pointer.y) : 0;
        var y2 = offset && pointer ? Math.max(offset.y, pointer.y) : 0;
        return {
            left: x1,
            top: y1,
            width: x2 - x1 + 1,
            height: y2 - y1 + 1,
        };
    };
    useImperativeHandle(ref, function () { return ({
        reset: function () {
            setEntries([]);
        },
    }); });
    var rect = rectangle();
    return (React.createElement("div", { className: classes.bBoxAnnotator, style: {
            width: bBoxAnnotatorStyle.width + "px",
            height: bBoxAnnotatorStyle.height + "px",
        }, ref: bBoxAnnotatorRef, onMouseDown: mouseDownHandler },
        React.createElement("div", { className: classes.imageFrame, style: {
                width: imageFrameStyle.width + "px",
                height: imageFrameStyle.height + "px",
                backgroundImage: "url(" + imageFrameStyle.backgroundImageSrc + ")",
            } },
            status === 'hold' || status === 'input' ? React.createElement(BBoxSelector, { rectangle: rect }) : null,
            status === 'input' ? (React.createElement(LabelBox, { inputMethod: inputMethod, top: rect.top + rect.height + borderWidth, left: rect.left - borderWidth, labels: labels, onSubmit: addEntry, ref: labelInputRef })) : null,
            entries.map(function (entry, i) { return (React.createElement("div", { style: {
                    border: borderWidth + "px solid rgb(255,0,0)",
                    position: 'absolute',
                    top: entry.top - borderWidth + "px",
                    left: entry.left - borderWidth + "px",
                    width: entry.width + "px",
                    height: entry.height + "px",
                    color: 'rgb(255,0,0)',
                    fontFamily: 'monospace',
                    fontSize: 'small',
                }, key: i, onMouseOver: function () {
                    return setEntries(function (prevEntries) {
                        return prevEntries.map(function (e) { return (e.id === entry.id ? __assign(__assign({}, e), { showCloseButton: true }) : e); });
                    });
                }, onMouseLeave: function () {
                    return setEntries(function (prevEntries) {
                        return prevEntries.map(function (e) { return (e.id === entry.id ? __assign(__assign({}, e), { showCloseButton: false }) : e); });
                    });
                } },
                entry.showCloseButton ? (React.createElement("div", { style: {
                        position: 'absolute',
                        top: '-8px',
                        right: '-8px',
                        width: '16px',
                        height: '0',
                        padding: '16px 0 0 0',
                        overflow: 'hidden',
                        color: '#fff',
                        backgroundColor: '#030',
                        border: '2px solid #fff',
                        borderRadius: '18px',
                        cursor: 'pointer',
                        userSelect: 'none',
                        textAlign: 'center',
                    }, onMouseDown: function (e) {
                        e.stopPropagation();
                    }, onClick: function () {
                        setEntries(entries.filter(function (e) { return e.id !== entry.id; }));
                    } },
                    React.createElement("div", { style: {
                            display: 'block',
                            textAlign: 'center',
                            width: '16px',
                            position: 'absolute',
                            top: '-2px',
                            left: '0',
                            fontSize: '16px',
                            lineHeight: '16px',
                            fontFamily: '"Helvetica Neue", Consolas, Verdana, Tahoma, Calibri, ' +
                                'Helvetica, Menlo, "Droid Sans", sans-serif',
                        } }, "\u00D7"))) : null,
                React.createElement("div", { style: { overflow: 'hidden' } }, entry.label))); }))));
});
export default BBoxAnnotator;
//# sourceMappingURL=index.js.map